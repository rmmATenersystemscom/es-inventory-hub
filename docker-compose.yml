version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: es-inventory-postgres
    environment:
      POSTGRES_DB: es_inventory_db
      POSTGRES_USER: es_inventory_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-es_inventory_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U es_inventory_user -d es_inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - es-inventory-network

  # Flask Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: es-inventory-dashboard
    environment:
      - DASHBOARD_PORT=5000
      - FLASK_DEBUG=False
    volumes:
      - /opt/shared-secrets/api-secrets.env:/app/.env:ro
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - es-inventory-network
    restart: unless-stopped

  # NinjaRMM Collector (for manual runs)
  ninja-collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.collectors
    container_name: es-inventory-ninja-collector
    environment:
      - COLLECTOR_TYPE=ninja
    volumes:
      - /opt/shared-secrets/api-secrets.env:/app/.env:ro
    command: ["python", "collectors/ninja/collector.py"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - es-inventory-network
    profiles:
      - manual

  # ThreatLocker Collector (for manual runs)
  threatlocker-collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.collectors
    container_name: es-inventory-threatlocker-collector
    environment:
      - COLLECTOR_TYPE=threatlocker
    volumes:
      - /opt/shared-secrets/api-secrets.env:/app/.env:ro
    command: ["python", "collectors/threatlocker/collector.py"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - es-inventory-network
    profiles:
      - manual

  # Data Processing (for manual runs)
  data-processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.collectors
    container_name: es-inventory-data-processor
    environment:
      - PROCESSOR_TYPE=data
    volumes:
      - /opt/shared-secrets/api-secrets.env:/app/.env:ro
    command: ["python", "scripts/process_data.py"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - es-inventory-network
    profiles:
      - manual

volumes:
  postgres_data:

networks:
  es-inventory-network:
    driver: bridge
